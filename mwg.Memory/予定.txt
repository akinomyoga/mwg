
□改善点
・Regex.ITester.Clone で result や ires を複製する必要はないのでは?
→抑も、
　a. 子ノードを使って読み取りを行う (tester.Read で null 以外の値を返し得る)
　b. 非決定性を持つ (tester.Indefinite で true を返し得る)
　の場合以外には Clone 関数自体が呼び出されない。
→result/ires (success/result) は読み取りの直後に、親ノードが読み取って、以降使用されない。
　(※ ずっと後になって使用するという実装をする事も可能だがその様な実装はしない様に気を付ける。)

・ElemNodeBase 系統の物は、Tester のインスタンスを沢山作成する必要は無いのではないか?
　現時点では毎回 Tester のインスタンスを作成する事になっているが、
　この様な実装になっていると少なくとも入力文字数だけインスタンスが作られる事となる。
　これは明らかに非効率的である。
→[暫定] 取り敢えず、試しに「一 Node インスタンスに、一 Tester インスタンス」でやってみる事とする。
　※ これを行うとスレッド安全性は明らかに損なわれる。
　　スレッド安全性を保つにはスレッド毎に Node を複製する必要がある。
　　然し複数のスレッドで使用する場合はなかなか考えにくいのでこれで良いと思われる。
　　
　　Regex を実用する際には、Node のラッパを作ると思われる。
　　そこで、現在実行中のスレッドとノードのペアを記録する様にする。
　　実行開始時に、暇な (== 使用中のスレッドが NULL) ノードがない場合には既存のノードから Clone すれば良い。
　　[未実装]

・全てのノードに関して Result インスタンスを生成する必要があるのか?
　特に ElemNodeBase 等もインスタンスを作成しているが、
　これはマッチした部分の全ての文字について Result インスタンスを生成する事に他ならず、
　然もこの Result インスタンスが保持している情報はその文字の位置だけである。
　(どの文字がどのノードでマッチしたかという情報すら保持していない。)
　
　子ノードを持つ場合などには Result インスタンスは必要であるが、
　それ以外の場合には Result インスタンスを生成しないでおいて (== null にしておいて)、
　親ノード側で null 判定を行ってインスタンスがある場合だけ登録という形にしても良い筈である。

　[未実装]

・. を演算子に昇格して常に AnyElemNode に為る様にする (^$ についても同様)

　[未実装]

■ProcessMemory
Stream として触る事が出来る様にする。


■C#

・int * ulong が出来ないのは何故か?