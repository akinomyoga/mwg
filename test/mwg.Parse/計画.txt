構文解析プログラム作成
	これは、他から定義を読み込んで「文脈」を構成する物に関する計画である。
	静的な物に関してはまた別に考えなければならない。

//*************************************************
//
//	ver 番号の付け方
//
//	※一番初めの数字…新しく一から作り直す度に増える。
//	　未だ何も作っていなくて計画だけの時は、0
//	※二つ目の数字…実装が一段落した時に増える。
//	※三つ目の数字…細かい修正に対して増える
//
//*************************************************
//
//	ver 0.0.0
//
//-------------------------------------------------

①領域

  A: 領域の初めで、その領域を処理する関数に入る。
  例:for 文の場合
	for(doc){
		if("(")結果=for1(doc);else error(doc);
		文(doc);
		if("else")return;
	}
	for1(doc){
		結果1=for1a(doc);
		結果2=for1a(doc);
		結果3=for1b(doc);
		return;
	}
	for1a(doc){
		//読み取り;
		if(";")return;
	}
	for1b(doc){
		//読み取り;
		if(")")return;
	}
	文(doc){
		if("{")return 複文(doc);
		//読み取り;
		if(";")return;
	}
	複文(doc){
		while(!"}")文(doc);	
	}

  [他に以下の様な方法もあるがここでは採用しない]

　B: 先ず、一番細かい単位を解析し段々と纏めていく方法
  例: 文字→単語→文節→語句→文→段落→章→…
  問題: どこも扱いが一様ならばよいがそうでない(文脈がある)と難しい

②文脈
　同じ関数でも処理する物を文脈で変化させる
　(文脈別に関数を作っても良いかも知れないが同じコードを幾つも書く事になり管理が悪い)
　実際の処理 (子関数の呼び出しも含む) の関数だけ差し替えるという手段がある

  例:文字を処理する関数
　　:コマンドを処理する関数(LaTeX)
　　:Element を処理する関数(HTML)
　→文脈で、追加/削除/変更 する。

③追加/削除/変更 の方法
　[文字を処理する関数]の差し替えを行う際に、
	どの文脈でも使用する関数群
	ある種類の文脈で使用する関数群
	特定の文脈でしか使用しない関数
　などがあり、これらは別々に整理した方がよい。

　方法:	文脈に関数群を対応づける
	他の文脈と共有する様な関数群は、[親文脈] を作成してそれに関連付ける。
	　それぞれの文脈はその[親文脈] を継承する。

③親関数の共有
　呼び出し元関数の中の変数を使用したい時がある。
　解決例: 双方向リスト (javascript なら配列でよい) の要素に変数テーブル(Hashtable など)を登録する。
	  この双方向リストにはクラス内の何処からでもアクセスする事が出来る様にする。
	　呼び出す毎にスタックと同じように追加していく。戻ってきた時に戻す
          　但し、使用しても使用しなくても良い場合がある。使用しない場合は、わざわざ登録しない
　解決例: 引数を参照渡しする

④共有する変数
　共有する変数は global の位置に設定する。
　例: カウンタ(LaTeX)

--------------------------------------------------------------------------------------------------

実際の実装

class document{
	//入力
	string			text		解析対象の文章
	int				index		文章中の現在位置を指し示す。
	//文脈
	hash<context>				context文脈
	string						currentC現在の文脈を指し示す key
	//出力
	string			output		出力結果
	string			log			ログ	
	//その他の共有する変数
	list<hash>					親の変数(context のスタックとして使用する事も出来るかも知れない)
	hash<int>		counters	カウンタ(LaTeX)
	hash<double>	lengths		長さ変数(LaTeX)	
}

class context{
	document*		doc			文章への参照
	context*[]		inherit			継承元
	hash<function>		letterHandlers		文字を処理する関数
	function		letterHandler(letter)	文字を処理する関数を返す(継承元からも検索する。基本的に override)
	//その他
	hash<function>		コマンドを処理する関数(LaTeX)
}

//*************************************************
//
//	ver 0.0.1
//
//-------------------------------------------------

修正解析
　一度解析した物に変更があった時、途中から開始する事が出来るようにする。
　1.文章の所々に文脈情報を埋め込んでおき、変更のあった場所から最近の文脈変更点から解析を実行する。
　2.変更点を通り過ぎて、一番初めに文脈が埋め込まれている物と一致した時点で修正解析は終了する)
→現在の文脈を表すクラスを作成する

出力の拡張
　出力は string で表せない場合もあるし、複数の情報を出力する必要性もあるかも知れない。
　そこで、出力を溜めておく class を作成する事が出来る様にする
　
　